const subscribeUser = async () => {
  try {
    const permission = await Notification.requestPermission();
    if (permission === 'granted') {
      console.log('Notification permission granted.');
    } else {
      console.log('Notification permission not granted.');
      throw new Error('User isn\'t subscribed.');
    }

    const messagingToken = await firebase.messaging().getToken();
    if (messagingToken) {
      const docRef = await firebase.firestore().collection('device_ids').doc(messagingToken);

      const subscribedStatus = await docRef.get().then(async function(doc) {
          if (doc.exists) {
            console.log('Device already registered');
            localStorage.setItem('pushNotificationsKey', messagingToken);
            return Promise.resolve({success: true});
          }

          return await firebase.firestore().collection('device_ids').doc(messagingToken).set({
            id: messagingToken,
          }).then(() => {
            console.log('Device subscribed');
            localStorage.setItem('pushNotificationsKey', messagingToken);
            return Promise.resolve({success: true});
          })
          .catch(err => {
            console.log('There was an error subscribing the device: ', err);
          });
      });

      if (subscribedStatus.success) {
          setIsSubscribed(true);
          setUserToken(messagingToken);
        }
      } else {
        // Show permission request.
        console.log('No Instance ID token available. Request permission to generate one.');
      }
  } catch(error) {
    if (error.code === "messaging/permission-blocked") {
        console.log("Please Unblock Notification Request Manually");
    } else {
        console.log("error Occurred", error);
    }
  };
};